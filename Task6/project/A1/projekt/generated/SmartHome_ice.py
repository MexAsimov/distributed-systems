# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'NoInput' not in _M_SmartHome.__dict__:
    _M_SmartHome.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::NoInput'

    _M_SmartHome._t_NoInput = IcePy.defineException('::SmartHome::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_SmartHome._t_NoInput

    _M_SmartHome.NoInput = NoInput
    del NoInput

if 'DeviceOff' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceOff = Ice.createTempClass()
    class DeviceOff(Ice.UserException):
        def __init__(self, reason="device has to be on"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::DeviceOff'

    _M_SmartHome._t_DeviceOff = IcePy.defineException('::SmartHome::DeviceOff', DeviceOff, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    DeviceOff._ice_type = _M_SmartHome._t_DeviceOff

    _M_SmartHome.DeviceOff = DeviceOff
    del DeviceOff

if 'OutOfRangeValue' not in _M_SmartHome.__dict__:
    _M_SmartHome.OutOfRangeValue = Ice.createTempClass()
    class OutOfRangeValue(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::OutOfRangeValue'

    _M_SmartHome._t_OutOfRangeValue = IcePy.defineException('::SmartHome::OutOfRangeValue', OutOfRangeValue, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    OutOfRangeValue._ice_type = _M_SmartHome._t_OutOfRangeValue

    _M_SmartHome.OutOfRangeValue = OutOfRangeValue
    del OutOfRangeValue

if 'State' not in _M_SmartHome.__dict__:
    _M_SmartHome.State = Ice.createTempClass()
    class State(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    State.ON = State("ON", 0)
    State.OFF = State("OFF", 1)
    State._enumerators = { 0:State.ON, 1:State.OFF }

    _M_SmartHome._t_State = IcePy.defineEnum('::SmartHome::State', State, (), State._enumerators)

    _M_SmartHome.State = State
    del State

if 'HeaterInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.HeaterInfo = Ice.createTempClass()
    class HeaterInfo(object):
        def __init__(self, state=_M_SmartHome.State.ON, actualHeaterTemp=0.0):
            self.state = state
            self.actualHeaterTemp = actualHeaterTemp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.HeaterInfo):
                return NotImplemented
            else:
                if self.state != other.state:
                    return False
                if self.actualHeaterTemp != other.actualHeaterTemp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_HeaterInfo)

        __repr__ = __str__

    _M_SmartHome._t_HeaterInfo = IcePy.defineStruct('::SmartHome::HeaterInfo', HeaterInfo, (), (
        ('state', (), _M_SmartHome._t_State),
        ('actualHeaterTemp', (), IcePy._t_float)
    ))

    _M_SmartHome.HeaterInfo = HeaterInfo
    del HeaterInfo

_M_SmartHome._t_Heater = IcePy.defineValue('::SmartHome::Heater', Ice.Value, -1, (), False, True, None, ())

if 'HeaterPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.HeaterPrx = Ice.createTempClass()
    class HeaterPrx(Ice.ObjectPrx):

        def getHeaterInfo(self, context=None):
            return _M_SmartHome.Heater._op_getHeaterInfo.invoke(self, ((), context))

        def getHeaterInfoAsync(self, context=None):
            return _M_SmartHome.Heater._op_getHeaterInfo.invokeAsync(self, ((), context))

        def begin_getHeaterInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Heater._op_getHeaterInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getHeaterInfo(self, _r):
            return _M_SmartHome.Heater._op_getHeaterInfo.end(self, _r)

        def setState(self, state, context=None):
            return _M_SmartHome.Heater._op_setState.invoke(self, ((state, ), context))

        def setStateAsync(self, state, context=None):
            return _M_SmartHome.Heater._op_setState.invokeAsync(self, ((state, ), context))

        def begin_setState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Heater._op_setState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_SmartHome.Heater._op_setState.end(self, _r)

        def setTemp(self, temp, context=None):
            return _M_SmartHome.Heater._op_setTemp.invoke(self, ((temp, ), context))

        def setTempAsync(self, temp, context=None):
            return _M_SmartHome.Heater._op_setTemp.invokeAsync(self, ((temp, ), context))

        def begin_setTemp(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Heater._op_setTemp.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_setTemp(self, _r):
            return _M_SmartHome.Heater._op_setTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.HeaterPrx.ice_checkedCast(proxy, '::SmartHome::Heater', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.HeaterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Heater'
    _M_SmartHome._t_HeaterPrx = IcePy.defineProxy('::SmartHome::Heater', HeaterPrx)

    _M_SmartHome.HeaterPrx = HeaterPrx
    del HeaterPrx

    _M_SmartHome.Heater = Ice.createTempClass()
    class Heater(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Heater')

        def ice_id(self, current=None):
            return '::SmartHome::Heater'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Heater'

        def getHeaterInfo(self, current=None):
            raise NotImplementedError("servant method 'getHeaterInfo' not implemented")

        def setState(self, state, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def setTemp(self, temp, current=None):
            raise NotImplementedError("servant method 'setTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_HeaterDisp)

        __repr__ = __str__

    _M_SmartHome._t_HeaterDisp = IcePy.defineClass('::SmartHome::Heater', Heater, (), None, ())
    Heater._ice_type = _M_SmartHome._t_HeaterDisp

    Heater._op_getHeaterInfo = IcePy.Operation('getHeaterInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_HeaterInfo, False, 0), ())
    Heater._op_setState = IcePy.Operation('setState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_State, False, 0),), (), None, ())
    Heater._op_setTemp = IcePy.Operation('setTemp', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_OutOfRangeValue))

    _M_SmartHome.Heater = Heater
    del Heater

if 'CameraInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.CameraInfo = Ice.createTempClass()
    class CameraInfo(object):
        def __init__(self, state=_M_SmartHome.State.ON, nightVisionState=_M_SmartHome.State.ON):
            self.state = state
            self.nightVisionState = nightVisionState

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.state)
            _h = 5 * _h + Ice.getHash(self.nightVisionState)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.CameraInfo):
                return NotImplemented
            else:
                if self.state is None or other.state is None:
                    if self.state != other.state:
                        return (-1 if self.state is None else 1)
                else:
                    if self.state < other.state:
                        return -1
                    elif self.state > other.state:
                        return 1
                if self.nightVisionState is None or other.nightVisionState is None:
                    if self.nightVisionState != other.nightVisionState:
                        return (-1 if self.nightVisionState is None else 1)
                else:
                    if self.nightVisionState < other.nightVisionState:
                        return -1
                    elif self.nightVisionState > other.nightVisionState:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CameraInfo)

        __repr__ = __str__

    _M_SmartHome._t_CameraInfo = IcePy.defineStruct('::SmartHome::CameraInfo', CameraInfo, (), (
        ('state', (), _M_SmartHome._t_State),
        ('nightVisionState', (), _M_SmartHome._t_State)
    ))

    _M_SmartHome.CameraInfo = CameraInfo
    del CameraInfo

_M_SmartHome._t_Camera = IcePy.defineValue('::SmartHome::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.CameraPrx = Ice.createTempClass()
    class CameraPrx(Ice.ObjectPrx):

        def getCameraInfo(self, context=None):
            return _M_SmartHome.Camera._op_getCameraInfo.invoke(self, ((), context))

        def getCameraInfoAsync(self, context=None):
            return _M_SmartHome.Camera._op_getCameraInfo.invokeAsync(self, ((), context))

        def begin_getCameraInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Camera._op_getCameraInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getCameraInfo(self, _r):
            return _M_SmartHome.Camera._op_getCameraInfo.end(self, _r)

        def setState(self, state, context=None):
            return _M_SmartHome.Camera._op_setState.invoke(self, ((state, ), context))

        def setStateAsync(self, state, context=None):
            return _M_SmartHome.Camera._op_setState.invokeAsync(self, ((state, ), context))

        def begin_setState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Camera._op_setState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setState(self, _r):
            return _M_SmartHome.Camera._op_setState.end(self, _r)

        def setNightVisionState(self, state, context=None):
            return _M_SmartHome.Camera._op_setNightVisionState.invoke(self, ((state, ), context))

        def setNightVisionStateAsync(self, state, context=None):
            return _M_SmartHome.Camera._op_setNightVisionState.invokeAsync(self, ((state, ), context))

        def begin_setNightVisionState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Camera._op_setNightVisionState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setNightVisionState(self, _r):
            return _M_SmartHome.Camera._op_setNightVisionState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.CameraPrx.ice_checkedCast(proxy, '::SmartHome::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Camera'
    _M_SmartHome._t_CameraPrx = IcePy.defineProxy('::SmartHome::Camera', CameraPrx)

    _M_SmartHome.CameraPrx = CameraPrx
    del CameraPrx

    _M_SmartHome.Camera = Ice.createTempClass()
    class Camera(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Camera')

        def ice_id(self, current=None):
            return '::SmartHome::Camera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Camera'

        def getCameraInfo(self, current=None):
            raise NotImplementedError("servant method 'getCameraInfo' not implemented")

        def setState(self, state, current=None):
            raise NotImplementedError("servant method 'setState' not implemented")

        def setNightVisionState(self, state, current=None):
            raise NotImplementedError("servant method 'setNightVisionState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_CameraDisp = IcePy.defineClass('::SmartHome::Camera', Camera, (), None, ())
    Camera._ice_type = _M_SmartHome._t_CameraDisp

    Camera._op_getCameraInfo = IcePy.Operation('getCameraInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_CameraInfo, False, 0), ())
    Camera._op_setState = IcePy.Operation('setState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_State, False, 0),), (), None, ())
    Camera._op_setNightVisionState = IcePy.Operation('setNightVisionState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_State, False, 0),), (), None, (_M_SmartHome._t_DeviceOff,))

    _M_SmartHome.Camera = Camera
    del Camera

if 'CameraPosition' not in _M_SmartHome.__dict__:
    _M_SmartHome.CameraPosition = Ice.createTempClass()
    class CameraPosition(object):
        def __init__(self, xAngle=0.0, yAngle=0.0):
            self.xAngle = xAngle
            self.yAngle = yAngle

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.CameraPosition):
                return NotImplemented
            else:
                if self.xAngle != other.xAngle:
                    return False
                if self.yAngle != other.yAngle:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CameraPosition)

        __repr__ = __str__

    _M_SmartHome._t_CameraPosition = IcePy.defineStruct('::SmartHome::CameraPosition', CameraPosition, (), (
        ('xAngle', (), IcePy._t_float),
        ('yAngle', (), IcePy._t_float)
    ))

    _M_SmartHome.CameraPosition = CameraPosition
    del CameraPosition

if 'PTZCameraInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.PTZCameraInfo = Ice.createTempClass()
    class PTZCameraInfo(object):
        def __init__(self, state=_M_SmartHome.State.ON, nightVisionState=_M_SmartHome.State.ON, position=Ice._struct_marker):
            self.state = state
            self.nightVisionState = nightVisionState
            if position is Ice._struct_marker:
                self.position = _M_SmartHome.CameraPosition()
            else:
                self.position = position

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.PTZCameraInfo):
                return NotImplemented
            else:
                if self.state != other.state:
                    return False
                if self.nightVisionState != other.nightVisionState:
                    return False
                if self.position != other.position:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PTZCameraInfo)

        __repr__ = __str__

    _M_SmartHome._t_PTZCameraInfo = IcePy.defineStruct('::SmartHome::PTZCameraInfo', PTZCameraInfo, (), (
        ('state', (), _M_SmartHome._t_State),
        ('nightVisionState', (), _M_SmartHome._t_State),
        ('position', (), _M_SmartHome._t_CameraPosition)
    ))

    _M_SmartHome.PTZCameraInfo = PTZCameraInfo
    del PTZCameraInfo

_M_SmartHome._t_PTZCamera = IcePy.defineValue('::SmartHome::PTZCamera', Ice.Value, -1, (), False, True, None, ())

if 'PTZCameraPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.PTZCameraPrx = Ice.createTempClass()
    class PTZCameraPrx(_M_SmartHome.CameraPrx):

        def getPTZCameraInfo(self, context=None):
            return _M_SmartHome.PTZCamera._op_getPTZCameraInfo.invoke(self, ((), context))

        def getPTZCameraInfoAsync(self, context=None):
            return _M_SmartHome.PTZCamera._op_getPTZCameraInfo.invokeAsync(self, ((), context))

        def begin_getPTZCameraInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_getPTZCameraInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getPTZCameraInfo(self, _r):
            return _M_SmartHome.PTZCamera._op_getPTZCameraInfo.end(self, _r)

        def changeCameraPosition(self, position, context=None):
            return _M_SmartHome.PTZCamera._op_changeCameraPosition.invoke(self, ((position, ), context))

        def changeCameraPositionAsync(self, position, context=None):
            return _M_SmartHome.PTZCamera._op_changeCameraPosition.invokeAsync(self, ((position, ), context))

        def begin_changeCameraPosition(self, position, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_changeCameraPosition.begin(self, ((position, ), _response, _ex, _sent, context))

        def end_changeCameraPosition(self, _r):
            return _M_SmartHome.PTZCamera._op_changeCameraPosition.end(self, _r)

        def setCameraPosition(self, position, context=None):
            return _M_SmartHome.PTZCamera._op_setCameraPosition.invoke(self, ((position, ), context))

        def setCameraPositionAsync(self, position, context=None):
            return _M_SmartHome.PTZCamera._op_setCameraPosition.invokeAsync(self, ((position, ), context))

        def begin_setCameraPosition(self, position, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.PTZCamera._op_setCameraPosition.begin(self, ((position, ), _response, _ex, _sent, context))

        def end_setCameraPosition(self, _r):
            return _M_SmartHome.PTZCamera._op_setCameraPosition.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.PTZCameraPrx.ice_checkedCast(proxy, '::SmartHome::PTZCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.PTZCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PTZCamera'
    _M_SmartHome._t_PTZCameraPrx = IcePy.defineProxy('::SmartHome::PTZCamera', PTZCameraPrx)

    _M_SmartHome.PTZCameraPrx = PTZCameraPrx
    del PTZCameraPrx

    _M_SmartHome.PTZCamera = Ice.createTempClass()
    class PTZCamera(_M_SmartHome.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Camera', '::SmartHome::PTZCamera')

        def ice_id(self, current=None):
            return '::SmartHome::PTZCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PTZCamera'

        def getPTZCameraInfo(self, current=None):
            raise NotImplementedError("servant method 'getPTZCameraInfo' not implemented")

        def changeCameraPosition(self, position, current=None):
            raise NotImplementedError("servant method 'changeCameraPosition' not implemented")

        def setCameraPosition(self, position, current=None):
            raise NotImplementedError("servant method 'setCameraPosition' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PTZCameraDisp)

        __repr__ = __str__

    _M_SmartHome._t_PTZCameraDisp = IcePy.defineClass('::SmartHome::PTZCamera', PTZCamera, (), None, (_M_SmartHome._t_CameraDisp,))
    PTZCamera._ice_type = _M_SmartHome._t_PTZCameraDisp

    PTZCamera._op_getPTZCameraInfo = IcePy.Operation('getPTZCameraInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_PTZCameraInfo, False, 0), ())
    PTZCamera._op_changeCameraPosition = IcePy.Operation('changeCameraPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_CameraPosition, False, 0),), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_OutOfRangeValue))
    PTZCamera._op_setCameraPosition = IcePy.Operation('setCameraPosition', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_CameraPosition, False, 0),), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_OutOfRangeValue))

    _M_SmartHome.PTZCamera = PTZCamera
    del PTZCamera

if 'TimeOfDay' not in _M_SmartHome.__dict__:
    _M_SmartHome.TimeOfDay = Ice.createTempClass()
    class TimeOfDay(object):
        def __init__(self, hour=0, minute=0):
            self.hour = hour
            self.minute = minute

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.TimeOfDay):
                return NotImplemented
            else:
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TimeOfDay)

        __repr__ = __str__

    _M_SmartHome._t_TimeOfDay = IcePy.defineStruct('::SmartHome::TimeOfDay', TimeOfDay, (), (
        ('hour', (), IcePy._t_short),
        ('minute', (), IcePy._t_short)
    ))

    _M_SmartHome.TimeOfDay = TimeOfDay
    del TimeOfDay

if 'RadioClockInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.RadioClockInfo = Ice.createTempClass()
    class RadioClockInfo(object):
        def __init__(self, radioState=_M_SmartHome.State.ON, volume=0, frequency=0.0, alarmState=_M_SmartHome.State.ON, alarmTime=Ice._struct_marker):
            self.radioState = radioState
            self.volume = volume
            self.frequency = frequency
            self.alarmState = alarmState
            if alarmTime is Ice._struct_marker:
                self.alarmTime = _M_SmartHome.TimeOfDay()
            else:
                self.alarmTime = alarmTime

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.RadioClockInfo):
                return NotImplemented
            else:
                if self.radioState != other.radioState:
                    return False
                if self.volume != other.volume:
                    return False
                if self.frequency != other.frequency:
                    return False
                if self.alarmState != other.alarmState:
                    return False
                if self.alarmTime != other.alarmTime:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RadioClockInfo)

        __repr__ = __str__

    _M_SmartHome._t_RadioClockInfo = IcePy.defineStruct('::SmartHome::RadioClockInfo', RadioClockInfo, (), (
        ('radioState', (), _M_SmartHome._t_State),
        ('volume', (), IcePy._t_int),
        ('frequency', (), IcePy._t_float),
        ('alarmState', (), _M_SmartHome._t_State),
        ('alarmTime', (), _M_SmartHome._t_TimeOfDay)
    ))

    _M_SmartHome.RadioClockInfo = RadioClockInfo
    del RadioClockInfo

_M_SmartHome._t_RadioClock = IcePy.defineValue('::SmartHome::RadioClock', Ice.Value, -1, (), False, True, None, ())

if 'RadioClockPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.RadioClockPrx = Ice.createTempClass()
    class RadioClockPrx(Ice.ObjectPrx):

        def getRadioClockInfo(self, context=None):
            return _M_SmartHome.RadioClock._op_getRadioClockInfo.invoke(self, ((), context))

        def getRadioClockInfoAsync(self, context=None):
            return _M_SmartHome.RadioClock._op_getRadioClockInfo.invokeAsync(self, ((), context))

        def begin_getRadioClockInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_getRadioClockInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getRadioClockInfo(self, _r):
            return _M_SmartHome.RadioClock._op_getRadioClockInfo.end(self, _r)

        def setRadioState(self, state, context=None):
            return _M_SmartHome.RadioClock._op_setRadioState.invoke(self, ((state, ), context))

        def setRadioStateAsync(self, state, context=None):
            return _M_SmartHome.RadioClock._op_setRadioState.invokeAsync(self, ((state, ), context))

        def begin_setRadioState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_setRadioState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setRadioState(self, _r):
            return _M_SmartHome.RadioClock._op_setRadioState.end(self, _r)

        def setVolume(self, volume, context=None):
            return _M_SmartHome.RadioClock._op_setVolume.invoke(self, ((volume, ), context))

        def setVolumeAsync(self, volume, context=None):
            return _M_SmartHome.RadioClock._op_setVolume.invokeAsync(self, ((volume, ), context))

        def begin_setVolume(self, volume, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_setVolume.begin(self, ((volume, ), _response, _ex, _sent, context))

        def end_setVolume(self, _r):
            return _M_SmartHome.RadioClock._op_setVolume.end(self, _r)

        def setFrequency(self, hertz, context=None):
            return _M_SmartHome.RadioClock._op_setFrequency.invoke(self, ((hertz, ), context))

        def setFrequencyAsync(self, hertz, context=None):
            return _M_SmartHome.RadioClock._op_setFrequency.invokeAsync(self, ((hertz, ), context))

        def begin_setFrequency(self, hertz, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_setFrequency.begin(self, ((hertz, ), _response, _ex, _sent, context))

        def end_setFrequency(self, _r):
            return _M_SmartHome.RadioClock._op_setFrequency.end(self, _r)

        def setAlarmState(self, state, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmState.invoke(self, ((state, ), context))

        def setAlarmStateAsync(self, state, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmState.invokeAsync(self, ((state, ), context))

        def begin_setAlarmState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setAlarmState(self, _r):
            return _M_SmartHome.RadioClock._op_setAlarmState.end(self, _r)

        def setAlarmTime(self, time, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmTime.invoke(self, ((time, ), context))

        def setAlarmTimeAsync(self, time, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmTime.invokeAsync(self, ((time, ), context))

        def begin_setAlarmTime(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.RadioClock._op_setAlarmTime.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_setAlarmTime(self, _r):
            return _M_SmartHome.RadioClock._op_setAlarmTime.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.RadioClockPrx.ice_checkedCast(proxy, '::SmartHome::RadioClock', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.RadioClockPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RadioClock'
    _M_SmartHome._t_RadioClockPrx = IcePy.defineProxy('::SmartHome::RadioClock', RadioClockPrx)

    _M_SmartHome.RadioClockPrx = RadioClockPrx
    del RadioClockPrx

    _M_SmartHome.RadioClock = Ice.createTempClass()
    class RadioClock(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::RadioClock')

        def ice_id(self, current=None):
            return '::SmartHome::RadioClock'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::RadioClock'

        def getRadioClockInfo(self, current=None):
            raise NotImplementedError("servant method 'getRadioClockInfo' not implemented")

        def setRadioState(self, state, current=None):
            raise NotImplementedError("servant method 'setRadioState' not implemented")

        def setVolume(self, volume, current=None):
            raise NotImplementedError("servant method 'setVolume' not implemented")

        def setFrequency(self, hertz, current=None):
            raise NotImplementedError("servant method 'setFrequency' not implemented")

        def setAlarmState(self, state, current=None):
            raise NotImplementedError("servant method 'setAlarmState' not implemented")

        def setAlarmTime(self, time, current=None):
            raise NotImplementedError("servant method 'setAlarmTime' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_RadioClockDisp)

        __repr__ = __str__

    _M_SmartHome._t_RadioClockDisp = IcePy.defineClass('::SmartHome::RadioClock', RadioClock, (), None, ())
    RadioClock._ice_type = _M_SmartHome._t_RadioClockDisp

    RadioClock._op_getRadioClockInfo = IcePy.Operation('getRadioClockInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_RadioClockInfo, False, 0), ())
    RadioClock._op_setRadioState = IcePy.Operation('setRadioState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_State, False, 0),), (), None, ())
    RadioClock._op_setVolume = IcePy.Operation('setVolume', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_OutOfRangeValue))
    RadioClock._op_setFrequency = IcePy.Operation('setFrequency', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_SmartHome._t_DeviceOff, _M_SmartHome._t_OutOfRangeValue))
    RadioClock._op_setAlarmState = IcePy.Operation('setAlarmState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_State, False, 0),), (), None, ())
    RadioClock._op_setAlarmTime = IcePy.Operation('setAlarmTime', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_TimeOfDay, False, 0),), (), None, (_M_SmartHome._t_OutOfRangeValue,))

    _M_SmartHome.RadioClock = RadioClock
    del RadioClock

# End of module SmartHome
