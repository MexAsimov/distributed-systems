/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;
import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.javadsl.Behaviors;
import akka.actor.typed.javadsl.Receive;
import akka.japi.Pair;
import akka.stream.*;
import akka.stream.javadsl.*;
import edu.agh.reactive.hello.HelloActor;
import edu.agh.reactive.math.MathActor;
import akka.japi.pf.ReceiveBuilder;


import java.io.IOException;
import java.time.Duration;
import java.util.concurrent.CompletionStage;

public class App {
    public static void main(String[] args)  throws InterruptedException{
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

//        final ActorSystem<String> helloSystem =
//                        ActorSystem.create(HelloActor.create(), "helloActor");
        // send messages
//        helloSystem.tell("hello world");


        //////////////////////////////////////////
        //TASK 1 - math operations
//        final ActorSystem<MathActor.MathCommand> mathContext =
//                ActorSystem.create(MathActor.create(), "actorMath");
//        System.out.println("math main: actor system ready");

        // send messages
//        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//
//        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
//        Thread.sleep(2000);
//
//        System.out.println("Math main: sending second package of messages");
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//        System.out.println("Math main: messages send");



        /// TASK 2 - Reactive Streams in Akka Streams
        final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);


//        // example how to create simple Akka Streams


//        final Source<Integer, NotUsed> source = Source.range(1, 100);
//        final Flow<Integer, String, NotUsed> flow = Flow
//                .fromFunction((Integer n) -> n.toString())
//                .buffer(7, OverflowStrategy.dropTail());
//
//        final Flow<String, String, NotUsed> debugFlow = Flow
//                .fromFunction(x -> {
//                    System.out.println("Processing: " + x);
//                    return x;
//                });
//
//        final Sink<String, CompletionStage<Done>> slowSink = Sink
//                .foreach(str-> {
//                    Thread.sleep(1000);
//                    System.out.println(str);
//                });
//        final RunnableGraph<NotUsed> runnableGraph = source.via(flow).via(debugFlow).async().to(slowSink);
//        runnableGraph.run(materializer);
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//
        final Source<Integer, NotUsed> source = Source.range(1,100);
        final Sink<Pair<Integer, Integer>, CompletionStage<Done>> sink = Sink.foreach(x -> System.out.println(x.first() + " " + x.second()));
        final Flow<Integer, Integer, NotUsed> add1 = Flow.of(Integer.class).map(elem -> elem + 1);
        final Flow<Integer, Integer, NotUsed> multiply10 = Flow.of(Integer.class).map(elem -> elem * 10);
        //
        final Flow<Integer, Integer, NotUsed> printFlow = Flow.of(Integer.class).map(x -> {
            System.out.println("Processing value: " + x);
            return x;
        });

        RunnableGraph.fromGraph(
         GraphDSL.create(
                sink,
                (builder, out) -> {
                    final UniformFanOutShape<Integer, Integer> broadcast = builder.add(Broadcast.create(2));
                    final FanInShape2<Integer, Integer, Pair<Integer, Integer>> zip = builder.add(Zip.create());
                    final Outlet<Integer> sourceOutlet = builder.add(source).out();

                    builder.from(sourceOutlet).via(builder.add(printFlow)).toFanOut(broadcast);
                    builder.from(broadcast).via(builder.add(add1)).toInlet(zip.in0());
                    builder.from(broadcast).via(builder.add(multiply10)).toInlet(zip.in1());
                    builder.from(zip.out()).to(out);
                    return ClosedShape.getInstance();
        })
        ).run(materializer);
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            greeterMain.terminate();
//            mathContext.terminate();
//            helloSystem.terminate();
            streamSystem.terminate();
        }
    }
}
